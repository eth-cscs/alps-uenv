diff --git a/miniapps/dpg/convection-diffusion.cpp b/miniapps/dpg/convection-diffusion.cpp
index 7659e52745..170f8f1c5e 100644
--- a/miniapps/dpg/convection-diffusion.cpp
+++ b/miniapps/dpg/convection-diffusion.cpp
@@ -79,7 +79,7 @@ enum prob_type
 };
 
 prob_type prob;
-Vector beta;
+Vector beta_glob;
 real_t epsilon;
 
 real_t exact_u(const Vector & X);
@@ -120,7 +120,7 @@ int main(int argc, char *argv[])
                   "Theta parameter for AMR");
    args.AddOption(&iprob, "-prob", "--problem", "Problem case"
                   " 0: manufactured, 1: Erickson-Johnson ");
-   args.AddOption(&beta, "-beta", "--beta",
+   args.AddOption(&beta_glob, "-beta", "--beta",
                   "Vector Coefficient beta");
    args.AddOption(&static_cond, "-sc", "--static-condensation", "-no-sc",
                   "--no-static-condensation", "Enable static condensation.");
@@ -147,11 +147,11 @@ int main(int argc, char *argv[])
    int dim = mesh.Dimension();
    MFEM_VERIFY(dim > 1, "Dimension = 1 is not supported in this example");
 
-   if (beta.Size() == 0)
+   if (beta_glob.Size() == 0)
    {
-      beta.SetSize(dim);
-      beta = 0.0;
-      beta[0] = 1.;
+      beta_glob.SetSize(dim);
+      beta_glob = 0.0;
+      beta_glob[0] = 1.;
    }
 
    args.PrintOptions(std::cout);
@@ -199,10 +199,10 @@ int main(int argc, char *argv[])
    ConstantCoefficient eps2(1/(epsilon*epsilon));
 
    ConstantCoefficient negeps(-epsilon);
-   VectorConstantCoefficient betacoeff(beta);
-   Vector negbeta = beta; negbeta.Neg();
-   DenseMatrix bbt(beta.Size());
-   MultVVt(beta, bbt);
+   VectorConstantCoefficient betacoeff(beta_glob);
+   Vector negbeta = beta_glob; negbeta.Neg();
+   DenseMatrix bbt(beta_glob.Size());
+   MultVVt(beta_glob, bbt);
    MatrixConstantCoefficient bbtcoeff(bbt);
    VectorConstantCoefficient negbetacoeff(negbeta);
 
@@ -598,7 +598,7 @@ void exact_hatf(const Vector & X, Vector & hatf)
    hatf.SetSize(X.Size());
    for (int i = 0; i<hatf.Size(); i++)
    {
-      hatf[i] = beta[i] * u - sigma[i];
+      hatf[i] = beta_glob[i] * u - sigma[i];
    }
 }
 
@@ -612,7 +612,7 @@ real_t f_exact(const Vector & X)
    real_t s = 0;
    for (int i = 0; i<du.Size(); i++)
    {
-      s += beta[i] * du[i];
+      s += beta_glob[i] * du[i];
    }
    return -epsilon * d2u + s;
 }
diff --git a/miniapps/dpg/pconvection-diffusion.cpp b/miniapps/dpg/pconvection-diffusion.cpp
index 64d75d8d10..062f07d0f1 100644
--- a/miniapps/dpg/pconvection-diffusion.cpp
+++ b/miniapps/dpg/pconvection-diffusion.cpp
@@ -91,7 +91,7 @@ static const char *enum_str[] =
 };
 
 prob_type prob;
-Vector beta;
+Vector beta_glob;
 real_t epsilon;
 
 real_t exact_u(const Vector & X);
@@ -141,7 +141,7 @@ int main(int argc, char *argv[])
                   "Theta parameter for AMR");
    args.AddOption(&iprob, "-prob", "--problem", "Problem case"
                   " 0: lshape, 1: General");
-   args.AddOption(&beta, "-beta", "--beta",
+   args.AddOption(&beta_glob, "-beta", "--beta",
                   "Vector Coefficient beta");
    args.AddOption(&static_cond, "-sc", "--static-condensation", "-no-sc",
                   "--no-static-condensation", "Enable static condensation.");
@@ -181,19 +181,19 @@ int main(int argc, char *argv[])
       case sinusoidal:
       case EJ:
       {
-         if (beta.Size() == 0)
+         if (beta_glob.Size() == 0)
          {
-            beta.SetSize(dim);
-            beta = 0.0;
-            beta[0] = 1.;
+            beta_glob.SetSize(dim);
+            beta_glob = 0.0;
+            beta_glob[0] = 1.;
          }
          break;
       }
       case bdr_layer:
       {
-         beta.SetSize(dim);
-         beta[0] = 1.;
-         beta[1] = 2.;
+         beta_glob.SetSize(dim);
+         beta_glob[0] = 1.;
+         beta_glob[1] = 2.;
          exact_known = false;
       }
       break;
@@ -846,7 +846,7 @@ void beta_function(const Vector & X, Vector & beta_val)
    }
    else
    {
-      beta_val = beta;
+      beta_val = beta_glob;
    }
 }
 
