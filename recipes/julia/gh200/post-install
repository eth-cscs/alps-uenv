#!/bin/bash

export ENV_MOUNT={{ env.mount }}           # export ENV_MOUNT=/user-environment
export ENV_META=$ENV_MOUNT/meta
export ENV_EXTRA=$ENV_META/extra
export ENV_JSON=$ENV_META/env.json
export ENV_VIEW_CREATOR=$ENV_EXTRA/view-creator.jl
export JULIAUP_ROOTDIR="\$SCRATCH/juliaup" # $SCRATCH must not be expanded during installation, but during activation
export JULIAUP_BINDIR=$JULIAUP_ROOTDIR/bin # juliaup and julia binaries


# Download and install julia in /tmp
export TMP=/tmp
export JULIA_DEPOT_PATH=$TMP/.julia
export JULIA_PROJECT=$TMP/.julia/environments/1.10
export PATH=$TMP/julia-1.10.4/bin:$PATH
cd $TMP
wget https://julialang-s3.julialang.org/bin/linux/aarch64/1.10/julia-1.10.4-linux-aarch64.tar.gz
tar -xzf julia-1.10.4-linux-aarch64.tar.gz


# Create preferences for key packages (MPI.jl - system specific!, CUDA.jl, ...)
export CRAYMPICH_LIBDIR=$(spack -C /user-environment/config location -i cray-mpich)/lib
export HDF5_LIBDIR=$(spack -C /user-environment/config location -i hdf5)/lib
export JULIA_ADIOS2_PATH=$(spack -C /user-environment/config location -i adios2) # This will be set as JULIA_ADIOS2_PATH environment variable in the activate script (ADIOS2.jl does not yet use preferences for using system libraries)
export JULIA_PREFDIR=$ENV_MOUNT/julia_preferences
mkdir -p $JULIA_PREFDIR

julia --project=$JULIA_PREFDIR -e 'using Pkg; Pkg.add(["MPIPreferences", "HDF5", "CUDA"])'
julia --project=$JULIA_PREFDIR -e 'using CUDA; CUDA.set_runtime_version!(local_toolkit=true)'
julia --project=$JULIA_PREFDIR -e 'using MPIPreferences; MPIPreferences.use_system_binary(mpiexec=["srun", "-C", "gpu"], extra_paths=[ENV["CRAYMPICH_LIBDIR"]])'
julia --project=$JULIA_PREFDIR -e 'using HDF5; HDF5.API.set_libraries!("$(ENV["HDF5_LIBDIR"])/libhdf5.so", "$(ENV["HDF5_LIBDIR"])/libhdf5_hl.so")'


# Create a wrapper for juliaup that installs julia on scratch if it is not already installed
# TODO: If possible it should not be $SCRATCH/juliaup but $SCRATCH/../juliaup/$USER (which should have a wipeout protection)
# TODO: Potentially one could create a similar julia wrapper (and add also squashfs trick)
export JULIAUP_WRAPPER_BINDIR=$ENV_MOUNT/juliaup_wrapper
export JULIAUP_WRAPPER=$JULIAUP_WRAPPER_BINDIR/juliaup
mkdir -p $JULIAUP_WRAPPER_BINDIR

julia -e 'println("""
#!/bin/bash
if [ ! -f $(ENV["JULIAUP_BINDIR"])/juliaup ]; then
  JULIAUP_DEPOT_PATH_OLD=\$JULIAUP_DEPOT_PATH
  PATH_OLD=\$PATH
  unset JULIAUP_DEPOT_PATH
  export PATH=$(echo $PATH | perl -pe "s|[^:]*juliaup(?:_wrapper)?[^:]*:?||g") # Remove all juliaup paths from PATH
  curl -fsSL https://install.julialang.org | sh -s -- --path=$(ENV["JULIAUP_ROOTDIR"]) --background-selfupdate 0 --startup-selfupdate 0
  export JULIAUP_DEPOT_PATH=\$JULIAUP_DEPOT_PATH_OLD
  export PATH=\$PATH_OLD
else
  $(ENV["JULIAUP_BINDIR"])/juliaup \$@
fi
""")' > $JULIAUP_WRAPPER
chmod +x $JULIAUP_WRAPPER


# Create am uenv view (and equivalent an activation script) that sets the environment variables (add the wrapper and juliaup to the path, and set juliaup and julia environment variables)
export JULIAUP_DEPOT=$JULIAUP_ROOTDIR/depot
export JULIA_DEPOT=$JULIAUP_ROOTDIR/depot
export ACTIVATE_SCRIPT=$ENV_MOUNT/activate

julia -e 'using Pkg; Pkg.add("JSON")'
julia $ENV_VIEW_CREATOR

julia -e 'println("""
export PATH=$(ENV["JULIAUP_WRAPPER_BINDIR"]):\$PATH
export PATH=$(ENV["JULIAUP_BINDIR"]):\$PATH
export JULIAUP_DEPOT_PATH=\$JULIAUP_DEPOT_PATH:$(ENV["JULIAUP_DEPOT"])
export JULIA_DEPOT_PATH=\$JULIA_DEPOT_PATH:$(ENV["JULIA_DEPOT"])
export JULIA_LOAD_PATH=\$JULIA_LOAD_PATH:$(ENV["JULIA_PREFDIR"])
export %=$(ENV["JULIA_ADIOS2_PATH"])
echo PATH=\$PATH; echo JULIAUP_DEPOT_PATH=\$JULIAUP_DEPOT_PATH; echo JULIA_DEPOT_PATH=\$JULIA_DEPOT_PATH; echo JULIA_LOAD_PATH=\$JULIA_LOAD_PATH
""")' > $ACTIVATE_SCRIPT
#echo "module load cudatoolkit"                                  >> $ACTIVATE_SCRIPT

#TODO: the temporary julia installation should also be done with juliaup - requires also no side effects
#TODO: juliaup installation does not work if the activate script is called first.
#TODO: create julia file that can create view or activate script
#TODO: create a base script that calls generic scripts with no site specific variables / uenv specific things (except for capability of creation of view)

# Instead of juliaup one could install a particular julia version; however, juliaup is more flexible and allows to switch between versions 
# and in particular, use your packages anyway need to be installed on scratch (or home)

# Define bin, depot (also for juliaup?), preferences - environment variables need to point to the correct directories

# Load automatically the required modules: cudatoolkit, cpu/gpu target modules if required (same preferences for cuda-aware MPI)

# uenv content:
# - juliaup: bash script that tries to run juliaup and if it does not find the file, it installs it on $SCRATCH without modifying bashrc etc (no side effects on environment, enabling to share julia and package installation on scratch between multiple uenvs)
# - environment variables for julia and juliaup as uenv environment: PATH, JULIAUP_DEPOT_PATH, JULIA_DEPOT_PATH, JULIA_LOAD_PATH, 
# - preferences for packages in load path (create automatically using MPIPreferences if possible?)

##export JULIA_MPI_PATH=$CRAY_MPICH_DIR #/opt/cray/pe/mpt/7.7.15/gni/mpich-gnu/8.2
