#!/bin/bash

#usage: stack-build -r recipe -s system -n name -b build-root

datetime () { date +"%Y-%m-%d %H:%M:%S"; }

[[ -t 1 ]] && interm=yes

#red ()    { [[ "${interm}" = "yes" ]] && echo "\e[1;31m$1\e[m" || echo "$1"; }
#yellow () { [[ "${interm}" = "yes" ]] && echo "\e[1;33m$1\e[m" || echo "$1"; }
red ()    { echo "\e[1;31m$1\e[m"; }
yellow () { echo "\e[1;33m$1\e[m"; }
log () { printf "$(yellow "[log $(datetime)]") $1\n"; }
err () { printf "$(red "[error $(datetime)]") $1\n"; exit 1; }

# return a unique id for the build
get_build_id () {
    [[ -z "${CI_PIPELINE_ID}" ]] && (cat /proc/sys/kernel/random/uuid | sed 's/[-]//g' | head -c 10) || echo ${CI_PIPELINE_ID}
}

usage () {
    echo "usage: stack-build -n name -r recipe-path -s system -b build-root [-d]"
    echo ""
    echo "where:"
    echo "  name:        the name of the stack"
    echo "  system:      the cluster name \(one of balfrin, hohgant, clariden\)"
    echo "  recipe-path: the location of the recipe"
    echo '  build-root:  the root path in which to perform the build, e.g. /dev/shm/$USER'
    echo ""
    [[ "" == "$1" ]] && exit 0
    err "$1"
}

system="-"
name="-"
recipe_path="-"
build_root="-"
spack_develop=""

while getopts n:s:r:b:d flag
do
    case "${flag}" in
        n) name=${OPTARG};;
        s) system=${OPTARG};;
        r) recipe_path=$(realpath "${OPTARG}");;
        b) build_root=$(realpath "${OPTARG}");;
        d) spack_develop="--develop";;
    esac
done

[[ "-" == "${system}"      ]] && usage "missing system argument"
[[ "-" == "${name}"        ]] && usage "missing name argument"
[[ "-" == "${recipe_path}" ]] && usage "missing recipe-path argument"
[[ "-" == "${build_root}" ]]  && usage "missing build-root argument"

build_id=$(get_build_id)
build_path="${build_root}/${name}/${build_id}"

log "SCRATCH     ${SCRATCH}"
log "USER        ${USER}"
log "name        ${name}"
log "system      ${system}"
log "recipe-path ${recipe_path}"
log "build-id    ${build_id}"
log "build-root  ${build_root}"
log "build-path  ${build_path}" 
[[ ! -z ${spack_develop} ]] && log "develop"

# Check if the recipe path exists
[[ -d "${recipe_path}" ]] || err "recipe path '$recipe_path' does not exist"

##
# Set up build cache flags if a build cache is available
##

#mirror_path=/scratch/e1000/jenkssl/uenv-cache
mirror_path=$SCRATCH/uenv-cache
if [ -d "${mirror_path}" ]; then
    log "found build cache at $mirror_path"
    echo "root: $mirror_path" > cache.yaml
    key_path="${mirror_path}/push-key.gpg"
    if [[ -f "${key_path}" ]]; then
        log "found build cache key at $key_path"
        echo "key: ${mirror_path}/push-key.gpg" >> cache.yaml
    fi
    cache_flags="--cache cache.yaml"
else
    rm -f cache.yaml
    cache_flags=""
fi

##
# Clone the stackinator and alps cluster configuration
##

# Initialise the stackinator
source ./scripts/setup-stackinator

##
# Configure the build
##

# call stackinator
log "configuring stack"

echo "stack-config -r ${recipe_path} -b ${build_path} -s $cluster_path/${system} $cache_flags ${spack_develop}"
stack-config -r "${recipe_path}" -b "${build_path}" -s "$cluster_path/${system}" $cache_flags ${spack_develop}

if [ ! $? -eq 0 ]; then
    # delete stackinator tool once it is no longer needed
    rm -rf "$tool_path" "$cluster_path"
    err "stack-config failed"
fi

# delete stackinator tool once it is no longer needed
rm -rf "$tool_path" "$cluster_path"

##
# Build the Spack stack
##

cd "${build_path}"
log "building image in ${build_path}"
echo "env --ignore-environment PATH=/usr/bin:/bin:${PWD}/spack/bin make store.squashfs -j64"
env --ignore-environment PATH=/usr/bin:/bin:${PWD}/spack/bin make store.squashfs -j64

if [ ! $? -eq 0 ]; then
    log "TODO: save WIP of build an store it for later inspection"
    cp -r "${build_path}/tmp/jenkssl/spack-stage/" $CI_PROJECT_DIR
    err "error building image"
fi

##
# Push build artifacts to JFrog
##

# Obtain credentials for JFrog - required to push the image and meta-data
creds_json=$(curl --retry 5 --retry-connrefused --fail --silent "$CSCS_CI_MW_URL/credentials?token=$CI_JOB_TOKEN&creds=container_registry")
creds_short=$(echo ${creds_json} | jq --join-output '.container_registry.username + ":" + .container_registry.password')
artifactory_url="https://jfrog.svc.cscs.ch/artifactory"
repo_path="alps-uenv/build/${build_id}/${system}/${name}"

# push the squashfs image to jfrog
destination_path="${artifactory_url}/${repo_path}/store.squashfs"
source_path="${build_path}/store.squashfs"

# curl-7.76 introduced --fail-with-body, but we do not have this version available, therefore we have to emulate it.
# We always want to see the body that is returned from the server, independent of the HTTP response code
# We want to fail the execution if HTTP response code is not equal to 2XX
# `curl -v` will print on stderr all headers received back, i.e. also something like the string "< HTTP/2 200",
# which we match. However it is on stderr, while output is on stdout, therefore we exchange the two and grep then
# for the status code, which fails if 2XX cannot be found
curl_opts="-v --retry 10 --retry-connrefused --silent"
log "pushing image '${source_path}' to '${destination_path}'"
# note: use retry, because pushing to JFrog was not 100% reliable during development of this script.
curl ${curl_opts} -u "${creds_short}" -X PUT "${destination_path}" -T "${source_path}" 3>&1 1>&2 2>&3 | egrep -q '^< HTTP.*2[0-9]{2}[[:space:]]*$'
[[ $? -eq 0  ]] || err "failed to push image"

# push the metadata to jfrog
destination_path="${artifactory_url}/${repo_path}"
log "pushing meta data '${source_path}' to '${destination_path}'"
for source in $(cd store; find meta -type f)
do
    log "pushing ${destination_path}/${source}"
    curl ${curl_opts} -u "${creds_short}" -X PUT "${destination_path}/${source}" -T "store/${source}" 3>&1 1>&2 2>&3 | egrep -q '^< HTTP.*2[0-9]{2}[[:space:]]*$'
    if [ ! $? -eq 0 ]; then
        err "unable to push meta data file store/$source"
    fi
done

artifact_path="$CI_PROJECT_DIR/artifacts"
log "copying meta-data to ${artifact_path}"
mkdir "${artifact_path}"
cp -r store/meta "${artifact_path}"

log "clean up build path '${build_path}'"
(rm -rf ${build_path})

