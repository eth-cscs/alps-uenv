#!/bin/bash

#usage: stack-build -r recipe -s system -n name

datetime () { date +"%Y-%m-%d %H:%M:%S"; }

[[ -t 1 ]] && interm=yes

#red ()    { [[ "${interm}" = "yes" ]] && echo "\e[1;31m$1\e[m" || echo "$1"; }
#yellow () { [[ "${interm}" = "yes" ]] && echo "\e[1;33m$1\e[m" || echo "$1"; }
red ()    { echo "\e[1;31m$1\e[m"; }
yellow () { echo "\e[1;33m$1\e[m"; }
log () { printf "$(yellow "[log $(datetime)]") $1\n"; }
err () { printf "$(red "[error $(datetime)]") $1\n"; exit 1; }

# return a unique id for the build
get_build_id () {
    [[ -z "${CI_JOB_ID}" ]] && (cat /proc/sys/kernel/random/uuid | sed 's/[-]//g' | head -c 10) || echo ${CI_JOB_ID}
}

usage () {
    echo "usage: stack-build -n name -r recipe-path -s system -b build-path"
    echo ""
    echo "where:"
    echo "  name:        the name of the stack"
    echo "  system:      the cluster name \(one of balfrin, hohgant, clariden\)"
    echo "  recipe-path: the location of the recipe"
    echo ""
    [[ "" == "$1" ]] && exit 0
    err "$1"
}

system="-"
name="-"
recipe_path="-"

while getopts n:s:r:b: flag
do
    case "${flag}" in
        n) name=${OPTARG};;
        s) system=${OPTARG};;
        r) recipe_path=$(realpath "${OPTARG}");;
    esac
done

[[ "-" == "${system}"      ]] && usage "missing system argument"
[[ "-" == "${name}"        ]] && usage "missing name argument"
[[ "-" == "${recipe_path}" ]] && usage "missing recipe-path argument"

build_id=$(get_build_id)
build_path="/dev/shm/stack/${name}/${build_id}"

log "name        ${name}"
log "system      ${system}"
log "recipe-path ${recipe_path}"
log "build-id    ${build_id}"
log "build-path  ${build_path}"

# Check if the recipe path exists
[[ -d "${recipe_path}" ]] || err "recipe path '$recipe_path' does not exist"

# Set up build cache mirror if a build cache exists on this system
mirror_path=/scratch/e1000/jenkssl/uenv-cache
key_path=${mirror_path}/push-key.gpg
source ./scripts/generate-mirror

# Initialise the stackinator
source ./scripts/setup-stackinator

# call stackinator
log "configuring stack"

echo "stack-config -r ${recipe_path} -b ${build_path} -s ${system}"
stack-config -r "${recipe_path}" -b "${build_path}" -s "${system}"

# delete stackinator tool once we have finished with it
rm -rf $tool_path

[[ $? -eq 0 ]] || err "stack-config failed";

# run build
cd "${build_path}"
log "building image"
echo "env --ignore-environment PATH=/usr/bin:/bin:${PWD}/spack/bin make store.squashfs -j64"
env --ignore-environment PATH=/usr/bin:/bin:${PWD}/spack/bin make store.squashfs -j64

if [ ! $? -eq 0 ]; then
    log "TODO: save WIP of build an store it for later inspection"
    err "error building image"
fi

# push to repository
creds_json=$(curl --silent "$CSCS_CI_MW_URL/credentials?token=$CI_JOB_TOKEN&creds=container_registry")
creds_short=$(echo ${creds_json} | jq --join-output '.container_registry.username + ":" + .container_registry.password')

artifactory_url="https://jfrog.svc.cscs.ch/artifactory"
repo_path="alps-uenv/build/${build_id}/${system}/${name}"
destination_path="${artifactory_url}/${repo_path}/store.squashfs"
source_path="${build_path}/store.squashfs"
log "pushing '${source_path}' to '${destination_path}'"

curl --silent --fail -u "${creds_short}" -X PUT "${destination_path}" -T "${source_path}"
[[ $? -eq 0  ]] || err "failed to push image"

log "image built and pushed to artifactory"
log "clean up build path '${build_path}'"
(rm -rf ${build_path})

