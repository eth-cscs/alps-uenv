#!/bin/bash

back_off() {
  local command=$1
  local max_retries=${2:-5}
  local count=0

  while true; do
    $command && return 0
    ((count++))

    [[ $count -eq $max_retries ]] && return 1

    sleep_time=$((2**count))
    echo "Retrying in $sleep_time seconds"
    sleep $sleep_time
  done
}

datetime () { date +"%Y-%m-%d %H:%M:%S"; }

[[ -t 1 ]] && interm=yes

red ()    { echo "\e[1;31m$1\e[m"; }
yellow () { echo "\e[1;33m$1\e[m"; }
log () { printf "$(yellow "[log $(datetime)]") $1\n"; }
err () { printf "$(red "[error $(datetime)]") $1\n"; exit 1; }

# return a unique id for the build
get_build_id () {
    [[ -z "${CI_PIPELINE_ID}" ]] && (cat /proc/sys/kernel/random/uuid | sed 's/[-]//g' | head -c 10) || echo ${CI_PIPELINE_ID}
}

usage () {
    echo "usage: stack-build -n name -r recipe-path -s system -b build-root -u uarch -m mount [-d] [-w]"
    echo ""
    echo "where:"
    echo "  name:        the name of the stack"
    echo "  system:      the cluster name \(one of balfrin, hohgant, clariden\)"
    echo "  recipe-path: the location of the recipe"
    echo '  build-root:  the root path in which to perform the build, e.g. /dev/shm/$USER'
    echo "  uarch:       the target micro-architecture"
    echo "  mount:       the mount point of the image"
    echo ""
    [[ "" == "$1" ]] && exit 0
    err "$1"
}

name="-"
system="-"
recipe_path="-"
build_root="-"
uarch="-"
mount="-"
spack_develop=""
no_bwrap=""

echo "====== parsing arguments $@"

while getopts n:s:r:b:u:m:dw flag
do
    case "${flag}" in
        n) name=${OPTARG};;
        s) system=${OPTARG};;
        r) recipe_path=$(realpath "${OPTARG}");;
        b) build_root=$(realpath "${OPTARG}");;
        u) uarch=${OPTARG};;
        m) mount=${OPTARG};;
        d) spack_develop="--develop";;
        w) no_bwrap="--no-bwrap";;
    esac
done

[[ "-" == "${name}"        ]] && usage "missing name argument"
[[ "-" == "${system}"      ]] && usage "missing system argument"
[[ "-" == "${recipe_path}" ]] && usage "missing recipe-path argument"
[[ "-" == "${build_root}"  ]] && usage "missing build-root argument"
[[ "-" == "${uarch}"       ]] && usage "missing uarch argument"
[[ "-" == "${mount}"       ]] && usage "missing mount argument"

build_id=$(get_build_id)
build_path="${build_root}/${name}/${build_id}"
ci_path="$(pwd)"

log "SCRATCH     ${SCRATCH}"
log "USER        ${USER}"
log "name        ${name}"
log "system      ${system}"
log "recipe-path ${recipe_path}"
log "build-id    ${build_id}"
log "build-root  ${build_root}"
log "build-path  ${build_path}"
log "ci-path     ${ci_path}"
log "mount       ${mount}"
[[ ! -z ${spack_develop} ]] && log "develop"
[[ ! -z ${no_bwrap} ]] && log "no bwrap"

# Check if the recipe path exists
[[ -d "${recipe_path}" ]] || err "recipe path '$recipe_path' does not exist"

# add scripts to PATH
export PATH="${ci_path}/scripts:$PATH"

##
# Set up build cache flags if a build cache is available
##

mirror_path=$SCRATCH/uenv-cache
if [ -d "${mirror_path}" ]; then
    log "found build cache at $mirror_path"
    echo "root: $mirror_path" > cache.yaml
    key_path="${mirror_path}/push-key.gpg"
    if [[ -f "${key_path}" ]]; then
        log "found build cache key at $key_path"
        echo "key: ${mirror_path}/push-key.gpg" >> cache.yaml
    fi
    cache_flags="--cache cache.yaml"
else
    log "no build cache found at $mirror_path"
    rm -f cache.yaml
    cache_flags=""
fi

##
# Download and configure oras
##

log "configuring oras"
source ${ci_path}/scripts/setup-oras


##
# Clone the stackinator and alps cluster configuration
##

# Initialise the stackinator
source ${ci_path}/scripts/setup-stackinator

##
# Configure the build
##

# call stackinator
log "configuring stack"

echo "stack-config -r ${recipe_path} -b ${build_path} -s $cluster_path/${system} -m ${mount} $cache_flags ${spack_develop} ${no_bwrap}"
stack-config -r "${recipe_path}" -b "${build_path}" -s "$cluster_path/${system}"  -m "${mount}" $cache_flags ${spack_develop} ${no_bwrap}

if [ ! $? -eq 0 ]; then
    # delete stackinator tool once it is no longer needed
    rm -rf "$tool_path" "$cluster_path"
    err "stack-config failed"
fi

# delete stackinator tool once it is no longer needed
rm -rf "$tool_path" "$cluster_path"

##
# Build the Spack stack
##

cd "${build_path}"

log "building image in ${build_path}"
echo "env --ignore-environment PATH=/usr/bin:/bin:${PWD}/spack/bin make store.squashfs -j64"
env --ignore-environment PATH=/usr/bin:/bin:${PWD}/spack/bin  HOME=$HOME https_proxy=$https_proxy http_proxy=$http_proxy no_proxy="$no_proxy" make store.squashfs -j64

if [ ! $? -eq 0 ]; then
    log "TODO: save WIP of build an store it for later inspection"
    cp -r "${build_path}/tmp/jenkssl/spack-stage/" $CI_PROJECT_DIR
    err "error building image"
fi

##
# Push build artifacts to JFrog
##

rego=jfrog.svc.cscs.ch/uenv
repo_base=build/${system}/${uarch}/${name}
repo=${repo_base}:${build_id}

log "pushing store.squashfs to ${rego}/${repo}"
oras push --registry-config ${jfrog_creds_path} ${rego}/${repo} --artifact-type application/x-squashfs store.squashfs
[[ $? -eq 0  ]] || err "failed to push image"

# push the metadata to jfrog
log "pushing meta data to ${rego}/${repo}"
(cd ./store; oras attach --registry-config ${jfrog_creds_path} --artifact-type uenv/meta ${rego}/${repo} ./meta)

log "clean up build path '${build_path}'"
(rm -rf ${build_path})

