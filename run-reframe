#!/bin/bash

#usage: run-reframe -s system -n name

datetime () { date +"%Y-%m-%d %H:%M:%S"; }

[[ -t 1 ]] && interm=yes

red ()    { echo "\e[1;31m$1\e[m"; }
yellow () { echo "\e[1;33m$1\e[m"; }
log () { printf "$(yellow "[log $(datetime)]") $1\n"; }
err () { printf "$(red "[error $(datetime)]") $1\n"; exit 1; }

usage () {
    echo "usage: reframe-run -n name -s system"
    echo ""
    echo "where:"
    echo "  name:        the name of the stack"
    echo "  system:      the cluster name \(one of balfrin, hohgant, clariden\)"
    echo ""
    [[ "" == "$1" ]] && exit 0
    err "$1"
}

system="-"
name="-"

while getopts n:s: flag
do
    case "${flag}" in
        n) name=${OPTARG};;
        s) system=${OPTARG};;
    esac
done

[[ "-" == "${system}"      ]] && usage "missing system argument"
[[ "-" == "${name}"        ]] && usage "missing name argument"

build_id=${CI_PIPELINE_ID}

log "SCRATCH     ${SCRATCH}"
log "USER        ${USER}"
log "name        ${name}"
log "system      ${system}"
log "build_id    ${build_id}"

# Obtain credentials for JFrog - required to push the image and meta-data
creds_json=$(curl --silent "${CSCS_CI_MW_URL}/credentials?token=${CI_JOB_TOKEN}&creds=container_registry")
creds_short=$(echo ${creds_json} | jq --join-output '.container_registry.username + ":" + .container_registry.password')
artifactory_url="https://jfrog.svc.cscs.ch/artifactory"
repo_path="alps-uenv/build/${build_id}/${system}/${name}"

# download the squashfs image from jfrog
artifact_path="$CI_PROJECT_DIR/artifacts"
squashfs_path="${artifact_path}/${name}.squashfs"
squashfs_url="${artifactory_url}/${repo_path}/store.squashfs"
log "Downloading squashfs image ${squashfs_url} to ${squashfs_path}"
curl --fail --retry 5 -o "${squashfs_path}" "${squashfs_url}"
[[ $? -eq 0  ]] || err "failed to download image"

log "Using artifacts in $artifact_path"
find "${artifact_path}"

cp "$CI_PROJECT_DIR/artifacts/meta/extra/reframe.yaml" "${artifact_path}/${name}.yaml"

[[ -z "${SLURM_PARTITION}" ]] && RFM_SYSTEM="${system}" || RFM_SYSTEM="${system}:${SLURM_PARTITION}"

# TODO: Use pip install once the prepare_cmds PR is included in a new release
rm -rf reframe
git clone -b develop https://github.com/reframe-hpc/reframe.git

rm -rf cscs-reframe-tests
git clone -b test/uenv_tests https://github.com/teojgo/cscs-reframe-tests.git

# Bootstrap ReFrame
cd reframe
./bootstrap.sh

export UENV_FILE=${squashfs_path}
export RFM_AUTODETECT_XTHOSTNAME=1

REFRAME_COMMAND="./bin/reframe -C ../cscs-reframe-tests/config/cscs-uenv.py --report-junit=report.xml -c ../cscs-reframe-tests/checks/uenv/ -r --system=${RFM_SYSTEM}"

log "REFRAME_COMMAND ${REFRAME_COMMAND}"
${REFRAME_COMMAND}
