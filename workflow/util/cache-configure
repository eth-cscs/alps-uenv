#!/usr/bin/env python3

import argparse
import pathlib
import yaml

def test_dir(path):
    p = pathlib.Path(path)
    if not p.is_dir():
        raise FileNotFoundError(f"The path '{p}' does not exist")
    return p

def test_file(path):
    p = pathlib.Path(path)
    if not p.is_file():
        raise FileNotFoundError(f"The file '{p}' does not exist")
    return p

def make_argparser():
    parser = argparse.ArgumentParser(
        description="Configure a stackinator recipe to enable/disable a build cache.",
    )

    parser.add_argument('recipe', help="the path of the recipe to configure")
    parser.add_argument(
        "-k", "--key", required=False, type=str,
        help="path to the gpg key used to sign packages - required to update the cache.")
    parser.add_argument(
        "-p", "--path", required=False, type=str,
        help="path to the build cache - if provided without a key the cache will be read only.")
    parser.add_argument("-d", "--disable", action="store_true",
        help="disable the build cache")
    parser.add_argument("--read-only", action="store_true")
    return parser


parser = make_argparser()
args = parser.parse_args()

# check that the recipe path is valid
recipe_path = test_dir(args.recipe)

config_path = test_file(recipe_path / 'config.yaml')

# load the config.yaml for the recipe
with config_path.open() as fid:
    config = yaml.load(fid, Loader=yaml.Loader)

# disable if requested
if args.disable:
    print("disabling build cache")
    config["mirror"] = {"enable": False}

# configure the cache
else:
    key = None
    if not args.read_only and not args.key is None:
        key = test_file(args.key).as_posix()

    if key:
        print(f"configuring write access with the key {key}")
    else:
        print("configuring read only build cache")

    config['mirror'] = {"enable": True, "key": key}

    # check that the path has been set
    if args.path is None:
        raise ValueError("the path argument was not set")
    cache_path = test_dir(args.path)

    mirrors = {
        'mirrors': {
            'alpscache': {
                'fetch': {
                    'url': f"file://{cache_path.as_posix()}",
                    'access_pair': [None, None],
                    'access_token': None,
                    'profile': None,
                    'endpoint_url': None,
                },
                'push': {
                    'url': f"file://{cache_path.as_posix()}",
                    'access_pair': [None, None],
                    'access_token': None,
                    'profile': None,
                    'endpoint_url': None,
                }
            }
        }
    }

    mirrors_path = recipe_path / 'mirrors.yaml'
    print(yaml.dump(mirrors, default_flow_style=False))
    with mirrors_path.open("w") as f:
        f.write(yaml.dump(mirrors, default_flow_style=False))
        f.write("\n")
    print(f"wrote {mirrors_path.as_posix()}")

with config_path.open("w") as f:
    f.write(yaml.dump(config, default_flow_style=False))
    f.write("\n")
print(yaml.dump(config, default_flow_style=False))
print(f"wrote {config_path.as_posix()}")

